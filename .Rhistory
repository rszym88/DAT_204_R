tpyeof(num1)
num1 <- 7
num1 * 3
str1 <- "Hello world"
str2 <- "F Hello WOrld"
paste(str1,str2)
tpyeof(num1)
typeof(num1)
num2 <- 27
num3 <- 12
root2 <- 2^(1/3)
sq2 <- 2.5^2
7:9
seq1 <- 7:9
veq1 <- 7:9
vec1 + 3
veq1 + 3
vec2 <- 20:23
vec2 <- 20:22
veq1 * vec2
vex3 <- a:z
veq1 <- 7:12
veq1 * vec2
seq(1,5,90)
seq(1,5)
seq(1,9, by=2)
c(vec2,veq1,50)
c(str1,str2)
?seq()
?rep()
?sample
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,size=2)
sample(1:100,2)
smpl1 <- sample(1:100,2)
smpl1 <- sample(1:100,2)
vecTst <- 1:15
sample(vecTst, 15)
add2 <- function(x) {
x + 2
}
add2(num2)
add3 <- function(x) x + 3
add3(3)
changeNum <- function(numb){
num1 <- c(num1,numb)
}
changeNum(8)
changeNum(8)
num1 <- c(veq1,numb)
changeNum <- function(numb){
num1 <- c(veq1,numb)
}
changeNum(8)
changeNum <- function(numb){
veq1 <- c(veq1,numb)
}
changeNum(8)
changeNum <- function(numb){
veq1 <<- c(veq1,numb)
}
changeNum(8)
changeNum(8)
veq1
changeNum <- function(numb){
veq1 <<- c(veq1,numb)
return(veq1)
}
changeNum(8)
addOpp2to <- function(x,y=2) { #adds user provided # to 2
return(y+x)
}
addOpp2to(3)
addOpp2to(3,3)
addOpp2to(y=20,x=15)
for(i in veq1){
return(i+7)
}
for(i in veq1){
return(i+7)
}
for(i in 1:6){
print(i+7)
}
#Fibonacci Sequence
finonacci <- c(0,1)
#Fibonacci Sequence
fibonacci <- c(0,1)
#Fibonacci Sequence
fibonacci <- c(0,1) #Beginning of Fib sequence
fpr(i in 3:100){
fibonacci <<- c(fibonacci,fibonacci[i-1]+fibonacci[i-2])
print(fibonacci)
}
for(i in 3:100){
fibonacci <<- c(fibonacci,fibonacci[i-1]+fibonacci[i-2])
print(fibonacci)
}
for(i in 3:100){
fibonacci <- c(fibonacci,fibonacci[i-1]+fibonacci[i-2])
print(fibonacci)
}
#Fibonacci Sequence
fibonacci <- c(0,1) #Beginning of Fib sequence
for(i in 3:100){
fibonacci <- c(fibonacci,fibonacci[i-1]+fibonacci[i-2])
print(fibonacci)
}
#creating dice
d6 <- 1:6
sample(d6)
sample(d6,size=1)
sum(sample(d6, size = 2, replace = T))
sum(sample(d6, size = 2, replace = T))
d6Roll2 <- function(d6) {
sum(sample(d6, size = 2, replace = T))
}
d6Roll2()
d6Roll2 <- function(d6) {
sum(sample(d6, size = 2, replace = T))
}
d6Roll2()
d6Roll2 <- function() {
sum(sample(d6, size = 2, replace = T))
}
d6Roll2()
d6Roll2()
d6Roll2()
replicate(1000, d6Roll2())
rollUsrDecd <- function(x){
replicate(x,d6Roll2())
}
rollUsrDecd(8)
rollMany <- rollUsrDecd(1000)
hist(rollMany)
rollW <- function(){
die <- 1:6
dice <- sample(die,size=2,replace=T,c(1/8,1/8,1/8,1/8,1/8,3/8))
}
rollW()
rollW <- function(){
die <- 1:6
dice <- sample(die,size=2,replace=T,c(1/8,1/8,1/8,1/8,1/8,3/8))
sum(dice)
}
rollW()
rollManyW <- replicate(100,rollW)
hist(rollManyW)
hist(rollMany)
hist(rollManyW)
rollManyW <- replicate(100,rollW())
hist(rollManyW)
rollW2 <- function(){
die <- 1:6
dice <- sample(die,size=2,replace=T,c(1,1,1,1,1,3))
sum(dice)
}
coinFlipW <- function(x){
sample(0:1, x, replace = T, prob = c(1,19))
}
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW()
coinFlipW(5)
coinFlipW(20)
coinFlipW(40)
diceResult <- NULL
for(i in 1:6){
for(j in 1:6){
diceResult <- c(diceResult,i+j)
}
}
diceResult/36
hist(diceResult)
hist(diceResult)
length(fibonacci)
diceResultSim <- replicate(10000, roll2dice())
#calculate with simulation
roll2dice <- function(){
sum(sample(1:6,size=2,replace=T))
}
diceResultSim <- replicate(10000, roll2dice())
probVec2 <- NULL #vector for sim answer
for(i in 2:12){
probVec2 <- c(probVec2,length(which(diceResultSim==i))/10000)
}
probVec2
diceResult <- diceResult/36
probVec1 <- NULL #vector for sim answer
for(i in 2:12){
probVec1 <- c(probVec1,length(which(diceResultSim==i))/10000)
}
plot(probVec1,probVec2)
pythagT <- function(s1,s2){
hyp <- sqrt(s1^2 + s2^2)
shortSide <- sqrt(s2^2 - s1^2)
c(hyp,shortSide)
}
pythagT(3,4)
#Solve ::
ansA <- (4^2 + 9)/(13 * 2)
#Solve ::
ansA <- (4^2 + 9)/(13 * 2)
ansB <- (18 + sqrt(4+9^3) - 9) / 9^(1/3)
ansC <- ((5/4) + 37 - 8^3) / (sqrt(5) / (37 + 9))
ansC <- (5/4) + 37 - 8^3 / sqrt(5) / (37 + 9)
sample(d6, seize=1)
#2 Create Dice Simultion ::
d6 <- c(1,2,3,4,6,6)
d8 <- 1:8
sample(d6, seize=1)
sample(d6, size=1)
sample(d6, size=1)
sample(d6, size=1)
sample(d6, size=1)
sample(d6, size=1)
sample(d6, size=1)
d8 <- 1:8
sample(d8, size=1, prob = 1,1,1,1,1,1,2,4)
sample(d8, size=1, prob = c(1,1,1,1,1,1,2,4)
sample(d8, size=1, prob = c(1,1,1,1,1,1,2,4)
load("~/.RData")
b <- c(1,1,1,1,1,1,1,1)
t <- function(b) sum(b*2^(length(b)-1):0))
b <- c(1,1,1,1,1,1,1,1)
t <- function(b) sum(b*2^(length(b)-1):0))
install.packages("ggplot2") # install ggplots 2
#load it into session
library("ggplot2")
getwd() #gets working directory
x <- 1:20
qplot(x) #plot x
y <- c(2:21,rep(30:7)) #create 2nd vector
qplot(y)
qplot(y, binwidth = 1) #changes how wide each of the squares is
qplot(y, binwidth = .25) #changes how wide each of the squares is
qplot(y, binwidth = .4) #changes how wide each of the squares is
x <- 1:27
qplot(x) #plot x natively creates histogram
y <- c(2:21,rep(30:7)) #create 2nd vector
qplot(y)
qplot(y, binwidth = .4) #changes how wide each of the squares is
qplot(x,y)
x <- 1:27
qplot(x) #plot x natively creates histogram
y <- c(2:21,rep(30:7)) #create 2nd vector
qplot(y)
qplot(y, binwidth = .4) #changes how wide each of the squares is
qplot(x,y)
qplot(x,y)
diceRoll <- replicate(1000, sum(sample(1:6, size=2, replace = T)))
qplot(diceRoll, binwidth = 1, main = "Dice Roll Results", xlab = "Roll Results") #plot result
"""
savehistory("E:/History Dump.txt")
2^8
t(c(1,1,1,1,1,1,1,1))
2^256
256/2
2^52
#exponent
2^11
#bias
2048/2
#
1.8 * 2^1023
1.8 * 2^2000
two <- sqrt(2)^2
two
two - 2
typeof(two)
two <- sqrt(two)^2 #should equal 2
two
two - 2 #should be 0
typeof(3)
two <- as.integer(2)
typeof(two)
two <- sqrt(two)^2 #should equal 2
two - 2 #should be 0
2^32
5%/%2
5/2
5%/%2
5/2
int2 <- 5L #another integer
typeof(int2)
2^31
as.integer(2^35)
#what Will Happen????
as.integer(2^35)
int3
int3
#what Will Happen????
int3 <- as.integer(2^35)
typeof(int3)
int3
vec <- 1:7
typeof(vec)
#new vector with fractional part
vecNew <- vec*1.5
typeof(vecNew)
300000000000000000L
300000000000000000
bigNum <- 300000000000000000
typeof(bugNum)
bigNum <- 300000000000000000L
typeof(bugNum)
typeof(bigNum)
#create a boolean vector
boolVec <- q(T,F,T,T)
#create a boolean vector
boolVec <- c(T,F,T,T)
typeof(boolVec)
mean(boolVec)
#Sum the logic vec
sum(boolVec)
length(boolVec)
charVec <- c("Dog","Cat")
typeof(charVec)
boolAndNum <- c(boolVec,7)
typeof(boolAndNum)
boolAndNumAndChar <- c(boolAndNum,"dog")
boolAndChar <- c(boolVec, "dog")
typeof(boolAndChar)
boolAndChar
animalVec <- c("Dog","Cat")
animalVec <- c("Dog","Cat")
#Find where the dog is in the vector
which(animalVec == "dog")
animalVec <- c("Dog","Cat","Dog","Cat","Dog","Cat")
#Find where the dog is in the vector
which(animalVec == "Dog")
length(animalVec)
setLength
setLength <- length(animalVec)
setLength
attributes(animalVec)
attributes(animalVec)
names(animals) <- c("my pet","your pet","1 pet","4 pet","no pet")
names(animalVec) <- c("my pet","your pet","1 pet","4 pet","no pet")
attributes(animalVec)
names(animalVec)
vec <-1:20
typeof(vec)
class(vec)
dim(vec)
#check dimmensions of the vector....single vec returns null
dim(vec) <- 2
#check dimmensions of the vector....single vec returns null
dim(vec) <- c(5,4)
dim()
class(vec)
#check dimmensions of the vector....single vec returns null
dim(vec) <- c(5,4)
dim()
attributes(vec)
dim(vec)
#check dimmensions of the vector....single vec returns null
dim(vec) <- c(5,4)
dim(vec)
attributes(vec)
vec
#Fills in rows now columns by default ( i spaced out here idk really)
vec
class(vec)
#Check the class
class(vec)
#make it into an array
dim(vec) <- c(2,5,2)
vec
typeof(vec)
class(vec)
vec
#create smaller vec
newVec <- 1:10
mat1 <- matrix(newVec)
typeof(mat1)
mat1
#must give matrix a couple of args for a prettier print out
mat1 <- matric(newVec, nrow = 2)
#must give matrix a couple of args for a prettier print out
mat1 <- matrix(newVec, nrow = 2)
mat1
#must give matrix a couple of args for a prettier print out
mat1 <- matrix(newVec, nrow = 2)
mat1
#must give matrix a couple of args for a prettier print out
mat1 <- matrix(newVec, nrow = 2, byrob = TRUE)
#must give matrix a couple of args for a prettier print out
mat1 <- matrix(newVec, nrow = 2, byrow = TRUE)
mat1
demo()
#pull the exact time
now <- Sys.time()
now
class(now)
#move it to a new object
then <- now
now <- Sys.time()
#check for elapsed time between 2 dates & times
then - now
#
seconds <- unclass(now)
seconds
#To obtain the integer of seconds
seconds <- unclass(now)
seconds
#
animalsFac <- factor(animalsFac)
#
animalsFac <- factor(animalVec)
#
animalFac <- factor(animalVec)
animalFac
typeof(animalFac)
class(animalFac)
qplot(animalFac)
hist(animalFac)
list1 <- list(1:7, "Dog", c(T,T,F,T),49L,42)
list1 <- list(1:7, "Dog", c(T,T,F,T),49L,42))
list1 <- list(1:7, "Dog", c(T,T,F,T),49L,42)
list1
list1[1]
vecFromList <- list1[1]
vecFromList
class(vecFromList)
vecFromList
#to obtain just the list item instead of a list from that item
vecFromList <- list1[[1]]
vecFromList
class(vecFromList)
df <- data.frame(name = c("Joe","Sarah","Tyler"), age = c(13,15,19), enrolled = c(T,T,F), stringsAsFactors = F)
df
typeof(df$age)
typeof(df$name)
df
df[[2]]
typeof(df)
class(df)
mean(df$age)
mean(df$enrolled)
cardDeck <- read.csv("E:/DAT_204_R/WK2/cardDeck.csv")
View(cardDeck)
cardDeck <- read.csv("E:/DAT_204_R/WK2/cardDeck.csv", stringsAsFactors=FALSE)
View(cardDeck)
cardDeck
qplot()
qplot(cardDeck)
head(cardDeck)
head(deck,10)
head(cardDeck,10)
tail(cardDeck)
#last 10 values
tail(cardDeck,10)
read.csv("\cardDeck")
read.csv(".\cardDeck")
getwd(0)
getwd()
wd <- getwd()
read.csv(wd,"cardDeck")
fd <- "E:\DAT_204_R\WK2"
read.csv(fd,"cardDeck")
fd <- "E:\DAT_204_R\WK2"
fd <- 'E:\DAT_204_R\WK2'
setwd("E:/DAT_204_R/WK2")
read.csv(fd,"cardDeck")
read.csv("cardDeck")
setwd("E:\DAT_204_R\WK2")
setwd("e:\dat_204_r/wk2/")
setwd("e:/dat_204_r/wk2/")
read.csv("cardDeck")
cardDeck
write.csv(deck, file = "deck1.csv", row.names = FALSE)
write.csv(cardDeck, file = "deck1.csv", row.names = FALSE)
wd()
getwd()
mean(cardDeck$value)
